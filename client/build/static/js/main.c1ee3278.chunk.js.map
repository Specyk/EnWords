{"version":3,"sources":["components/nav/Dropdown.jsx","components/nav/Index.jsx","views/Main/Phrasal.jsx","views/Main/Word.jsx","views/Main/Index.jsx","views/Browse/SearchBox.jsx","views/Browse/PhrasalList/AddNew.jsx","views/Browse/PhrasalList/List.jsx","views/Browse/PhrasalList/Index.jsx","views/Browse/WordList/AddNew.jsx","views/Browse/WordList/List.jsx","views/Browse/WordList/Index.jsx","views/Browse/Index.jsx","views/Settings.jsx","App.js","serviceWorker.js","index.js"],"names":["Dropdown","props","useState","expanded","setExpanded","className","onMouseOver","onMouseOut","children","items","map","item","to","path","label","Nav","location","useLocation","renderSimpleLink","isActive","key","link","pathname","renderMenuLink","Phrasal","data","en","pl","example","Word","definition","Main","phrasal","word","SearchBox","onSubmit","searchHandler","id","type","value","AddNew","addNewHandler","placeholder","List","isAdding","setIsAdding","onClick","e","phrasals","PhrasalList","state","update","a","getPhrasals","setState","axios","get","res","post","this","then","Component","handleAddWord","words","WordList","getWords","BrowseView","Settings","App","refresh","Promise","all","getWord","getPhrasal","responses","r","console","log","editViewHandler","target","exact","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c1ee3278.chunk.js","sourcesContent":["import { useState } from 'react'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default function Dropdown(props) {\n    const [expanded, setExpanded] = useState(false)\n    const onMouseOverHandler = () => setExpanded(true)\n    const onMouseOutHandler = () => setExpanded(false)\n    const renderTree = () => <div className={expanded ? \"content\" : \"hidden content\"}>\n        {props.items.map((item) => <Link className='linkItem' to={item.path}>{item.label}</Link>)}\n    </div>\n\n    return (\n        <li className=\"Dropdown\" onMouseOver={onMouseOverHandler} onMouseOut={onMouseOutHandler}>\n            <div className=\"toogle\">\n                {props.children}\n            </div>\n            {renderTree()}\n        </li>\n    )\n}\n","import React from 'react'\nimport { useLocation } from 'react-router-dom'\n\nimport { Link } from 'react-router-dom'\nimport Dropdown from './Dropdown'\nimport '../../App.css'\n\nexport default function Nav(props) {\n    const location = useLocation()\n    const renderMenuLink = ({ path, label, items }) => {\n        const isActive = location.pathname === path\n        const resultLinkEl = items ? <Dropdown className='' path={path} items={items}>{label}</Dropdown> : renderSimpleLink({ path, label, isActive })\n        return resultLinkEl\n    }\n\n    const renderSimpleLink = ({ path, label, isActive }) => (\n        <li key={path} className={`${isActive ? 'active' : ''}`}>\n            <Link to={path}>{label}</Link>\n        </li>)\n\n    const globalLinks = [\n        { path: '/', label: 'Learn' },\n        {\n            path: '/browse', label: 'Browse',\n            items: [\n                { path: '/browse/words', label: 'Words' },\n                { path: '/browse/phrasals', label: 'Phrasals' }\n            ]\n        },\n        { path: '/settings', label: 'Settings' },\n    ]\n\n    const speechOptions = [\"on\", \"off\"]\n    return (\n        <div className=\"Nav\">\n            <ul className=\"global\">\n                {globalLinks.map(link => renderMenuLink(link))}\n            </ul>\n            <ul className=\"local\">\n                <li>Refresh</li>\n                <li>Speech</li>\n            </ul>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Phrasal({ data }) {\n    return (\n        <div className=\"Phrasal\">\n            <div className=\"expression\">\n                <div className=\"en\">{data.en}</div>\n                <div className=\"pl\">{data.pl}</div>\n            </div>\n            <div className=\"example\">{data.example}</div>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function Word({ data }) {\n    return (\n        <div className=\"Word\">\n            <div className=\"word\">\n                <div className=\"en\">{data.en}</div>\n                <div className=\"pl\">{data.pl}</div>\n            </div>\n            <div className=\"definition\">{data.definition}</div>\n            <div className=\"example\">{data.example}</div>\n        </div>\n    )\n}\n","import React from 'react'\nimport Phrasal from './Phrasal'\nimport Word from './Word'\nimport '../../App.css'\n\nexport default function Main({ phrasal, word }) {\n    return (\n        <div className=\"Main\">\n            <Phrasal data={phrasal} />\n            <Word data={word} />\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function SearchBox(props) {\n    return (\n        <div className=\"SearchBox\">\n            <form onSubmit={props.searchHandler}>\n                <input id=\"searchText\" type=\"text\"></input>\n                <input type=\"submit\" value=\"Search\"></input>\n            </form>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function AddNew(props) {\n    return (\n        <form className=\"AddNew\" onSubmit={props.addNewHandler}>\n            <span className=\"en\"><input id=\"en\" type=\"text\" placeholder=\"English version\"></input></span>\n            <span className=\"pl\"><input id=\"pl\" type=\"text\" placeholder=\"Polish version\"></input></span>\n            <span className=\"example\">\n                <input id=\"example\" type=\"text\" placeholder=\"Example of use\"></input>\n                <input className=\"saveBtn\" type=\"submit\" value=\"+\"></input>\n            </span>\n        </form>\n    )\n}\n","import React, { useState } from 'react'\nimport AddNew from './AddNew'\n\nexport default function List(props) {\n    const [isAdding, setIsAdding] = useState()\n\n    const switchAddForm = e => isAdding ? setIsAdding(false) : setIsAdding(true)\n    const renderAddNew = () => isAdding ? <li><AddNew /></li> : \"\"\n\n    const createPhrasalEntry = phrasal =>\n        <li>\n            <span className=\"pl\">{phrasal.pl}</span>\n            <span className=\"en\">{phrasal.en}</span>\n            <span className=\"example\">{phrasal.example}</span>\n        </li>\n\n    return (\n        <ul>\n            <li>\n                <span className=\"pl\">Polish</span>\n                <span className=\"en\">English</span>\n                <span className=\"example\">\n                    <span>Example</span>\n                    <span className=\"addNewBtn\" onClick={switchAddForm} type=\"button\">Add new</span>\n                </span>\n            </li>\n            {renderAddNew()}\n            {props.phrasals.map(createPhrasalEntry)}\n        </ul>\n    )\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\n\nimport SearchBox from '../SearchBox'\nimport AddNew from './AddNew'\nimport List from './List'\n\nexport default class PhrasalList extends Component {\n    state = {\n        phrasals: []\n    }\n\n    componentDidMount() {\n        this.update().then(() => { })\n    }\n\n    update = async () => {\n        const phrasals = await this.getPhrasals()\n        this.setState({ phrasals })\n    }\n\n    getPhrasals = async () => {\n        const res = await axios.get('/api/phrasals')\n        return res.data\n    }\n\n    addNewHandler = async (e) => {\n\n        axios.post('/api/phrasals', {})\n    }\n\n    searchHandler() {\n\n    }\n\n    render() {\n        return (\n            <div>\n                <SearchBox searchHandler={this.searchHandler}></SearchBox>\n                <List phrasals={this.state.phrasals} addNewHandler={this.addNewHandler}></List>\n            </div >\n        )\n    }\n}\n","import React from 'react'\n\nexport default function AddNew(props) {\n    return (\n        <form className=\"AddNew\" onSubmit={props.handleAddWord}>\n            <span className=\"en\"><input id=\"en\" type=\"text\" placeholder=\"English version\"></input></span>\n            <span className=\"pl\"><input id=\"pl\" type=\"text\" placeholder=\"Polish version\"></input></span>\n            <span className=\"definition\"><input id=\"pl\" type=\"text\" placeholder=\"Polish version\"></input></span>\n            <span className=\"example\">\n                <input id=\"pl\" type=\"text\" placeholder=\"Polish version\"></input>\n                <input className=\"saveBtn\" type=\"submit\" value=\"+\"></input>\n            </span>\n        </form>\n    )\n}\n","import React, { useState } from 'react'\nimport AddNew from './AddNew'\n\nexport default function List(props) {\n    const [isAdding, setIsAdding] = useState()\n\n    const switchAddForm = e => isAdding ? setIsAdding(false) : setIsAdding(true)\n    const renderAddNew = () => isAdding ? <li><AddNew /></li> : \"\"\n\n    const createWordEntry = word =>\n        <li>\n            <span className=\"pl\">{word.pl}</span>\n            <span className=\"en\">{word.en}</span>\n            <span className=\"definition\">{word.definition}</span>\n            <span className=\"example\">{word.example}</span>\n        </li>\n\n    return (\n        <ul>\n            <li>\n                <span className=\"pl\">Polish</span>\n                <span className=\"en\">English</span>\n                <span className=\"definition\">Definition</span>\n                <span className=\"example\">\n                    <span>Example</span>\n                    <span className=\"addNewBtn\" onClick={switchAddForm} type=\"button\">Add new</span>\n                </span>\n            </li>\n            {renderAddNew()}\n            {props.words.map(createWordEntry)}\n        </ul>\n    )\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\n\nimport SearchBox from '../SearchBox'\nimport AddNew from './AddNew'\nimport List from './List'\n\nexport default class WordList extends Component {\n    state = {\n        words: []\n    }\n\n    componentDidMount() {\n        this.update().then(() => { })\n    }\n\n    update = async () => {\n        const words = await this.getWords()\n        this.setState({ words })\n    }\n\n    getWords = async () => {\n        const res = await axios.get('/api/words')\n        return res.data\n    }\n\n    addNewHandler = () => {\n\n    }\n\n    searchHandler = () => {\n\n    }\n\n    render() {\n        return (\n            <div>\n                <SearchBox searchHandler={this.searchHandler}></SearchBox>\n                <List words={this.state.words} addNewHandler={this.addNewHandler}></List>\n            </div >\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Route } from 'react-router-dom'\n\nimport PhrasalList from './PhrasalList/Index'\nimport WordList from './WordList/Index'\n\nexport default class BrowseView extends Component {\n    state = {\n    }\n    render() {\n        return (\n            <div className='BrowseView'>\n                <Route path=\"/browse/phrasals\">\n                    <PhrasalList></PhrasalList>\n                </Route>\n                <Route path=\"/browse/words\">\n                    <WordList></WordList>\n                </Route>\n            </div>\n        )\n    }\n}\n","import React from 'react'\n\nexport default function Settings() {\n    return (\n        <div>\n            Settings view\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport axios from 'axios'\n\nimport Nav from './components/nav/Index'\nimport Main from './views/Main/Index'\nimport Browse from './views/Browse/Index'\nimport Settings from './views/Settings'\n\nexport default class App extends Component {\n  state = {\n    phrasal: { en: \"coś tam en\" },\n    word: { en: \"coś tam en\" }\n  }\n\n  async componentDidMount() {\n    await this.refresh()\n  }\n\n  refresh = async () => {\n    try {\n      const responses = await Promise.all(\n        [\n          this.getWord(),\n          this.getPhrasal()\n        ]\n      )\n      const [word, phrasal] = responses.map(r => r.data)\n\n      this.setState({ word, phrasal })\n    } catch (err) {\n      console.log(`refresh word error: ${err}`)\n    }\n  }\n\n  getWord = async () => {\n    const res = await axios.get('/api/words/random')\n    return res;\n  }\n\n  getPhrasal = async () => {\n    const res = await axios.get('/api/phrasals/random')\n    return res;\n  }\n\n\n  editViewHandler = (e) => {\n    console.log(`event = ${e}\\ntarget = ${e.target}`)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Nav editViewHandler={() => console.log(\"Jestem kurwa\")} />\n          <Switch>\n            <Route path=\"/\" exact>\n              <Main word={this.state.word} phrasal={this.state.phrasal} />\n            </Route>\n            <Route path=\"/settings\">\n              <Settings></Settings>\n            </Route>\n            <Route path=\"/browse\">\n              <Browse></Browse>\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}